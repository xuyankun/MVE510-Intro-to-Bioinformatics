source("myscript.R")
source('C:/Users/hasee/Desktop/MVE510/myscript.R', echo=TRUE)
source("myscript.R")
load("C:/Users/hasee/Desktop/MVE510/ComputerExercise/ComputerExercise3/.RData")
library(dada2)
sample_names <- c("BP101","BP155","BP186","BP278","BP315","BP331")
sample_files <- paste0(sample_names, "_16s.fq.gz")
plotQualityProfile(sample_files)
reads_derep <- derepFastq(sample_files, verbose=TRUE)
reads_derep
reads_derep$BP101_16s.fq.gz$uniques
reads_derep$BP101_16s.fq.gz
reads_derep$BP101_16s.fq.gz$uniques.length
length(reads_derep$BP101_16s.fq.gz$uniques)
length(reads_derep$sample_files[1]$uniques)
sample_files[1]
names(sample_files[1])
names(sample_files)
reads_derep$uniques
reads_derep
length(reads_derep$"BP101_16s.fq.gz"$uniques)
length(reads_derep$sample_files[1]$uniques)
sample_files[1]
sample_files[2]
length(sample_files)
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
for (i in 1:sample.len) {
files = sample_files[i]
num.unique[i] = reads_derep$files$uniques
}
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
for (i in 1:sample.len) {
files = sample_files[i]
num.unique[i] = reads_derep$files$uniques
}
length(reads_derep$sample_files[1]$uniques)
files = sample_files[1]
reads_derep$files$uniques
reads_derep$:files"$uniques
reads_derep$"files"$uniques
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
num.unique[1] = reads_derep$BP101_16s.fq.gz$uniques
unm.unique[2] = reads_derep$BP155_16s.fq.gz$uniques
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
num.unique[1] = reads_derep$BP101_16s.fq.gz$uniques
num.unique[2] = reads_derep$BP155_16s.fq.gz$uniques
num.unique[3] = reads_derep$BP186_16s.fq.gz$uniques
num.unique[4] = reads_derep$BP278_16s.fq.gz$uniques
num.unique[5] = reads_derep$BP315_16s.fq.gz$uniques
num.unique[6] = reads_derep$BP331_16s.fq.gz$uniques
# WRITE YOUR CODE HERE
sample.len = length(sample_files)
num.unique = vector(mode ="integer", length = sample.len)
num.unique[1] = reads_derep$BP101_16s.fq.gz$uniques
num.unique[2] = reads_derep$BP155_16s.fq.gz$uniques
num.unique[3] = reads_derep$BP186_16s.fq.gz$uniques
num.unique[4] = reads_derep$BP278_16s.fq.gz$uniques
num.unique[5] = reads_derep$BP315_16s.fq.gz$uniques
num.unique[6] = reads_derep$BP331_16s.fq.gz$uniques
# WRITE YOUR CODE HERE
reads_derep$BP101_16s.fq.gz$uniques
sample.len = length(sample_files)
num.unique = vector(mode ="integer", length = sample.len)
num.unique[1] = length(reads_derep$BP101_16s.fq.gz$uniques)
num.unique[2] = length(reads_derep$BP155_16s.fq.gz$uniques)
num.unique[3] = length(reads_derep$BP186_16s.fq.gz$uniques)
num.unique[4] = length(reads_derep$BP278_16s.fq.gz$uniques)
num.unique[5] = length(reads_derep$BP315_16s.fq.gz$uniques)
num.unique[6] = length(reads_derep$BP331_16s.fq.gz$uniques)
# WRITE YOUR CODE HERE
reads_derep
length(reads_derep$sample_files[1]$uniques)
length(reads_derep$"sample_files[1]"$uniques)
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
num.unique[1] = length(reads_derep$BP101_16s.fq.gz$uniques)
num.unique[2] = length(reads_derep$BP155_16s.fq.gz$uniques)
num.unique[3] = length(reads_derep$BP186_16s.fq.gz$uniques)
num.unique[4] = length(reads_derep$BP278_16s.fq.gz$uniques)
num.unique[5] = length(reads_derep$BP315_16s.fq.gz$uniques)
num.unique[6] = length(reads_derep$BP331_16s.fq.gz$uniques)
num.unique.frac = vector(mode ="double", length = sample.len)
num.unique.frac[1] = num.unique[1] / 40235
num.unique.frac[2] = num.unique[2] / 35024
num.unique.frac[3] = num.unique[3] / 40845
num.unique.frac[4] = num.unique[4] / 47767
num.unique.frac[5] = num.unique[5] / 44990
num.unique.frac[6] = num.unique[6] / 54608
num.unique.frac
# WRITE YOUR CODE HERE
error_reads <- learnErrors(reads_derep, multithread=TRUE)
cluster_reads <- dada(reads_derep, err=error_reads, multithread=TRUE)
seqtab_reads <- removeBimeraDenovo(makeSequenceTable(cluster_reads), multithread=TRUE, verbose=TRUE)
seqtab_reads
View(seqtab_reads)
sam1.var = t(seqtab_reads[1,])
View(sam1.var)
sam1.var = vector(seqtab_reads[1,])
sam1.var = matirx(seqtab_reads[1,])
View(sam1.var)
sam1.var = seqtab_reads[1,]
sam1.var = t(seqtab_reads[1,])
sam1.var = t(seqtab_reads[1,])
sam1.var = transpose(seqtab_reads[1,])
sam1.var = seqtab_reads[1,]
sam1.var = t(sam1.var)
sam2.var = seqtab_reads[2,]
sam3.var = seqtab_reads[3,]
View(sam2.var)
sam1.var = seqtab_reads[1,]
sam2.var = seqtab_reads[2,]
sam3.var = seqtab_reads[3,]
sam1.var = seqtab_reads[1,]
sam2.var = seqtab_reads[2,]
sam3.var = seqtab_reads[3,]
sam4.var = seqtab_reads[4,]
sam5.var = seqtab_reads[5,]
sam6.var = seqtab_reads[6,]
sam1.var = cbind(sam1.var, sam1.var/15104, sam1.var/40235)
View(sam1.var)
View(sam1.var)
sam1.var = seqtab_reads[1,]
sam2.var = seqtab_reads[2,]
sam3.var = seqtab_reads[3,]
sam4.var = seqtab_reads[4,]
sam5.var = seqtab_reads[5,]
sam6.var = seqtab_reads[6,]
sam1.var = cbind(sam1.var, sam1.var/15104, sam1.var/40235)
colnames(sam1.var) = c("variants","var/unique","var/total")
sam2.var = cbind(sam2.var, sam2.var/13769, sam2.var/35024)
colnames(sam2.var) = c("variants","var/unique","var/total")
sam3.var = cbind(sam3.var, sam3.var/19742, sam3.var/40845)
colnames(sam3.var) = c("variants","var/unique","var/total")
sam4.var = cbind(sam4.var, sam4.var/15654, sam4.var/47767)
colnames(sam4.var) = c("variants","var/unique","var/total")
sam5.var = cbind(sam5.var, sam5.var/12439, sam5.var/44990)
colnames(sam5.var) = c("variants","var/unique","var/total")
sam6.var = cbind(sam6.var, sam6.var/11790, sam6.var/54608)
colnames(sam6.var) = c("variants","var/unique","var/total")
View(sam6.var)
taxa_reads <- assignTaxonomy(seqtab_reads, "greengenes_13.8_97.fna.gz", tryRC=TRUE)
library(phyloseq)
library(ggplot2)
metadata <- read.delim("metadata.tsv")
rownames(metadata) <- metadata$ID
rownames(seqtab_reads) <- metadata$ID
ps_reads <- phyloseq(otu_table(seqtab_reads, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa_reads))
plot_richness(ps_reads, x="SampleType", measures=c("Shannon", "Simpson"), col="ID")
View(metadata)
metadata$ID
rownames(seqtab_reads)
ps_reads
ps_plot <- transform_sample_counts(ps_reads, function(x) x/sum(x))
ps_plot <- prune_taxa(names(sort(taxa_sums(ps_reads), decreasing=TRUE)[1:200]), ps_plot)
plot_bar(ps_plot, x="Class", facet_grid=SampleType~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
View(ps_reads)
taxa_reads
View(taxa_reads)
plot_richness(ps_reads, x="SampleType", measures=c("Shannon", "Simpson"), col="ID")
plot_richness(ps_reads, x="SampleType", measures=c("Shannon", "Simpson"), col="ID")
View(ps_plot)
ps_plot <- transform_sample_counts(ps_reads, function(x) x/sum(x))
ps_plot <- prune_taxa(names(sort(taxa_sums(ps_reads), decreasing=TRUE)[1:200]), ps_plot)
plot_bar(ps_plot, x="Class", facet_grid=SampleType~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
View(ps_reads)
ps_plot <- transform_sample_counts(ps_reads, function(x) x/sum(x))
ps_plot <- prune_taxa(names(sort(taxa_sums(ps_reads), decreasing=TRUE)[1:200]), ps_plot)
plot_bar(ps_plot, x="Class", facet_grid=SampleType~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
ps_plot <- transform_sample_counts(ps_reads, function(x) x/sum(x))
ps_plot <- prune_taxa(names(sort(taxa_sums(ps_reads), decreasing=TRUE)[1:200]), ps_plot)
plot_bar(ps_plot, x="Class", facet_grid=SampleType~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
library(DESeq2)
install.packages("DESeq2")
metadata
plot_bar(ps_plot, x="Class", facet_grid=SampleName~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
ps_plot <- transform_sample_counts(ps_reads, function(x) x/sum(x))
ps_plot <- prune_taxa(names(sort(taxa_sums(ps_reads), decreasing=TRUE)[1:200]), ps_plot)
plot_bar(ps_plot, x="Class", facet_grid=SampleType~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
plot_bar(ps_plot, x="Class", facet_grid=SampleName~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
test_reads <- DESeq(phyloseq_to_deseq2(ps_reads, ~SampleType), test="Wald", fitType="parametric", parallel=TRUE)
head(results(test_reads))
results_reads <- results(test_reads, contrast=list("SampleType_less_contaminated_vs_highly_contaminated"))
sigtab_reads <- cbind(as(results_reads, "data.frame"), as(tax_table(ps_reads)[rownames(results_reads),], "matrix"))
class_ordering <- sort(tapply(sigtab_reads$log2FoldChange, sigtab_reads$Class, function(x) max(x)), decreasing=TRUE)  # sort class by max fold change
sigtab_reads$Class <- factor(as.character(sigtab_reads$Class), levels=names(class_ordering))  # order the x-axis
genus_ordering <- sort(tapply(sigtab_reads$log2FoldChange, sigtab_reads$Genus, function(x) max(x)), decreasing=TRUE)  # sort genus by max fold change
sigtab_reads$Genus <- factor(as.character(sigtab_reads$Genus), levels=names(genus_ordering))  # order ???
size <- apply(otu_table(ps_reads), 2, mean)
sigtab_reads$Size <- 50*(size/sum(size))^0.4
sigtab_reads_plot <- sigtab_reads[which(sigtab_reads$padj < 0.01),]
ggplot(sigtab_reads_plot, aes(x=Class, y=log2FoldChange, color=Class)) + geom_point(size=sigtab_reads_plot$Size, alpha=0.5) + theme(axis.text.x=element_text(angle=-90, hjust=0, vjust=0.5), legend.position="none")
test_reads
head(results(test_reads))
results_reads <- results(test_reads, contrast=list("SampleType_less_contaminated_vs_highly_contaminated"))
sigtab_reads <- cbind(as(results_reads, "data.frame"), as(tax_table(ps_reads)[rownames(results_reads),], "matrix"))
class_ordering <- sort(tapply(sigtab_reads$log2FoldChange, sigtab_reads$Class, function(x) max(x)), decreasing=TRUE)  # sort class by max fold change
sigtab_reads$Class <- factor(as.character(sigtab_reads$Class), levels=names(class_ordering))  # order the x-axis
genus_ordering <- sort(tapply(sigtab_reads$log2FoldChange, sigtab_reads$Genus, function(x) max(x)), decreasing=TRUE)  # sort genus by max fold change
sigtab_reads$Genus <- factor(as.character(sigtab_reads$Genus), levels=names(genus_ordering))  # order ???
size <- apply(otu_table(ps_reads), 2, mean)
sigtab_reads$Size <- 50*(size/sum(size))^0.4
sigtab_reads_plot <- sigtab_reads[which(sigtab_reads$padj < 0.01),]
ggplot(sigtab_reads_plot, aes(x=Class, y=log2FoldChange, color=Class)) + geom_point(size=sigtab_reads_plot$Size, alpha=1) + theme(axis.text.x=element_text(angle=-90, hjust=0, vjust=0.5), legend.position="none")
sigtab_reads_plot <- sigtab_reads[which(sigtab_reads$padj < 0.01),]
ggplot(sigtab_reads_plot, aes(x=Class, y=log2FoldChange, color=Class)) + geom_point(size=sigtab_reads_plot$Size, alpha=0.5) + theme(axis.text.x=element_text(angle=-90, hjust=0, vjust=0.5), legend.position="none")
sigtab_reads_plot
ps_reads
otu_table(ps_reads)
c(1 2; 3 4)
matrix(1 2; 3 4 )
matrix(1 , 2; 3, 4 )
matrix(c(2.3,5,9,NA,5,8,7),ncol=3)
matrix(c(2.3,5,9,2,5,8,7),ncol=2)
aa = matrix(c(2.3,5,9,2,5,8,7),ncol=2)
apply(aa, 2, mean)
apply(aa, 1, mean)
sigtab_reads_plot <- sigtab_reads[which(sigtab_reads$padj < 0.01),]
ggplot(sigtab_reads_plot, aes(x=Class, y=log2FoldChange, color=Class)) + geom_point(size=sigtab_reads_plot$Size, alpha=0.5) + theme(axis.text.x=element_text(angle=-90, hjust=0, vjust=0.5), legend.position="none")
ps_reads
ps_plot@sam_data
ps_plot@otu_table
seqtab_reads
otu_table(ps_reads)
size
sigtab_reads_plot
library(GenomicRanges)
library(GenomicAlignments)
library(rtracklayer)
library(ggbio)
install.packages("ggbio")
biocLite("ggbior")
biocLite("ggbio")
library(GenomicRanges)
library(GenomicAlignments)
library(rtracklayer)
library(ggbio)
Sys.setlocale("LC_ALL","Chinese")
library(GenomicRanges)
library(GenomicAlignments)
library(rtracklayer)
library(ggbio)
genes.full <- read.delim('gene_abundance.tsv', row.names=1)
genes.full.pca <- prcomp(t(genes.full), center=TRUE, scale=TRUE)
summary(genes.full.pca)
plot(genes.full.pca)
library(dada2)
sample_names <- c("BP101","BP155","BP186","BP278","BP315","BP331")
sample_files <- paste0(sample_names, "_16s.fq.gz")
setwd("C:/Users/hasee/Desktop/MVE510/ComputerExercise/ComputerExercise4/ComputerExercise4_data")
plotQualityProfile(sample_files)
reads_derep <- derepFastq(sample_files, verbose=TRUE)
sample.len = length(sample_files)
num.unique = vector(mode ="double", length = sample.len)
num.unique[1] = length(reads_derep$BP101_16s.fq.gz$uniques)
num.unique[2] = length(reads_derep$BP155_16s.fq.gz$uniques)
num.unique[3] = length(reads_derep$BP186_16s.fq.gz$uniques)
num.unique[4] = length(reads_derep$BP278_16s.fq.gz$uniques)
num.unique[5] = length(reads_derep$BP315_16s.fq.gz$uniques)
num.unique[6] = length(reads_derep$BP331_16s.fq.gz$uniques)
num.unique.frac = vector(mode ="double", length = sample.len)
num.unique.frac[1] = num.unique[1] / 40235
num.unique.frac[2] = num.unique[2] / 35024
num.unique.frac[3] = num.unique[3] / 40845
num.unique.frac[4] = num.unique[4] / 47767
num.unique.frac[5] = num.unique[5] / 44990
num.unique.frac[6] = num.unique[6] / 54608
num.unique.frac
error_reads <- learnErrors(reads_derep, multithread=TRUE)
cluster_reads <- dada(reads_derep, err=error_reads, multithread=TRUE)
seqtab_reads <- removeBimeraDenovo(makeSequenceTable(cluster_reads), multithread=TRUE, verbose=TRUE)
sam1.var = seqtab_reads[1,]
sam2.var = seqtab_reads[2,]
sam3.var = seqtab_reads[3,]
sam4.var = seqtab_reads[4,]
sam5.var = seqtab_reads[5,]
sam6.var = seqtab_reads[6,]
sam1.var = cbind(sam1.var, sam1.var/15104, sam1.var/40235)
colnames(sam1.var) = c("variants","var/unique","var/total")
sam2.var = cbind(sam2.var, sam2.var/13769, sam2.var/35024)
colnames(sam2.var) = c("variants","var/unique","var/total")
sam3.var = cbind(sam3.var, sam3.var/19742, sam3.var/40845)
colnames(sam3.var) = c("variants","var/unique","var/total")
sam4.var = cbind(sam4.var, sam4.var/15654, sam4.var/47767)
colnames(sam4.var) = c("variants","var/unique","var/total")
sam5.var = cbind(sam5.var, sam5.var/12439, sam5.var/44990)
colnames(sam5.var) = c("variants","var/unique","var/total")
sam6.var = cbind(sam6.var, sam6.var/11790, sam6.var/54608)
colnames(sam6.var) = c("variants","var/unique","var/total")
taxa_reads <- assignTaxonomy(seqtab_reads, "greengenes_13.8_97.fna.gz", tryRC=TRUE)
library(phyloseq)
library(ggplot2)
metadata <- read.delim("metadata.tsv")
rownames(metadata) <- metadata$ID
rownames(seqtab_reads) <- metadata$ID
ps_reads <- phyloseq(otu_table(seqtab_reads, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa_reads))
library(phyloseq)
library(ggplot2)
plot_richness(ps_reads, x="SampleType", measures=c("Shannon", "Simpson"), col="ID")
ps_plot <- transform_sample_counts(ps_reads, function(x) x/sum(x))
ps_plot <- prune_taxa(names(sort(taxa_sums(ps_reads), decreasing=TRUE)[1:200]), ps_plot)
plot_bar(ps_plot, x="Class", facet_grid=SampleType~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
plot_bar(ps_plot, x="Class", facet_grid=SampleName~., fill="Family") + geom_bar(aes(color=Family, fill=Family), stat="identity", position="stack") + theme(legend.position="none")
library(DESeq2)
test_reads <- DESeq(phyloseq_to_deseq2(ps_reads, ~SampleType), test="Wald", fitType="parametric", parallel=TRUE)
head(results(test_reads))
results_reads <- results(test_reads, contrast=list("SampleType_less_contaminated_vs_highly_contaminated"))
sigtab_reads <- cbind(as(results_reads, "data.frame"), as(tax_table(ps_reads)[rownames(results_reads),], "matrix"))
class_ordering <- sort(tapply(sigtab_reads$log2FoldChange, sigtab_reads$Class, function(x) max(x)), decreasing=TRUE)  # sort class by max fold change
sigtab_reads$Class <- factor(as.character(sigtab_reads$Class), levels=names(class_ordering))  # order the x-axis
genus_ordering <- sort(tapply(sigtab_reads$log2FoldChange, sigtab_reads$Genus, function(x) max(x)), decreasing=TRUE)  # sort genus by max fold change
sigtab_reads$Genus <- factor(as.character(sigtab_reads$Genus), levels=names(genus_ordering))  # order ???
size <- apply(otu_table(ps_reads), 2, mean)
sigtab_reads$Size <- 50*(size/sum(size))^0.4
sigtab_reads_plot <- sigtab_reads[which(sigtab_reads$padj < 0.01),]
ggplot(sigtab_reads_plot, aes(x=Class, y=log2FoldChange, color=Class)) + geom_point(size=sigtab_reads_plot$Size, alpha=0.5) + theme(axis.text.x=element_text(angle=-90, hjust=0, vjust=0.5), legend.position="none")
sigtab_reads_plot
